-init {
	$self = (object) array(
		'functions' => array(),
		'prestatement' => array(),
		'assigned' => array(),
		'prefix' => '',
		'varCounter' => 0,
		'fnCounter' => 0,
		'catch_return' => FALSE,
		'lookups' => array(
			TRUE => array(TRUE => array(), FALSE => array()),
			FALSE => array(TRUE => array(), FALSE => array()),
		),
		'loader' => NULL,
		'dumpFunctions' => TRUE,
		'dumper' => NULL,
	);
}

// has optional second argument `options`
// options:
//
//   - force: if true, code will be generated even if main function (`_<AST hash>_0`) exists
//   - generate: "string" | "object", default "string"
//               if "string", functions will be concatenated and `return "_<AST hash>_0";`
//               added at the end;
//               if "object" (object) array("functions" => array( ... ), "main" => "_<AST hash>_0"),
//               where functions array is filled with function declarations will be returned
//   - loader: function that will be called when when function object ->loaded is FALSE
//             the function will be given two arguments, function object and global object
//   - dumpFunctions: true | false, default true, if true, function objects will be added
//                    ->string property with dumper function declaration
//

-invoke(ast) {
	$self->functions = $self->prestatement = $self->assigned = array();
	$self->prefix = WALK(array('genprefix_', $ast));
	$self->varCounter = $self->fnCounter = 0;
	$self->catch_return = FALSE;
	$self->lookups = array(
		TRUE => array(TRUE => array(), FALSE => array()),
		FALSE => array(TRUE => array(), FALSE => array()),
	);
	$self->loader = NULL;
	$self->dumpFunctions = TRUE;

	$force = FALSE;
	$generate = 'string';

	if (func_num_args() > 1) {
		foreach ((array) func_get_arg(1) as $k => $v) {
			if ($k === 'force') {
				$force = $v;

			} else if ($k === 'generate') {
				$generate = $v;

			} else if ($k === 'loader') {
				$self->loader = $v;

			} else if ($k === 'dumpFunctions') {
				$self->dumpFunctions = $v;

			} else {
				throw new Exception("Unknown option $k.");
			}
		}
	}

	if ($self->dumpFunctions) {
		$self->dumper = new JSDumper;
	}


	if ($force || !function_exists("_{$self->prefix}_0")) {
		WALK($ast);
	}

	if ($generate === 'string') {
		return implode("\n", $self->functions) . "\nreturn '_{$self->prefix}_0';";

	} else if ($generate === 'object') {
		return (object) array(
			'functions' => $self->functions,
			'main' => "_{$self->prefix}_0",
		);

	} else {
		throw new Exception("Unknown generate option $generate.");
	}
}

genprefix_(ast) {
	$ret = '';

	if (is_array($ast)) {
		foreach ($ast as $v) {
			$ret .= WALK(array('genprefix_', $v));
		}

	} else {
		$ret = (string) $ast;
	}

	return md5($ret);
}

program(ast, file) {
	$body = array();
	$fn = WALK(array("genfn_"));

	$body[] = 'function ' . $fn . '($global = NULL, $scope = NULL) {';
	$body[] = "if (!is_object(\$global)) {" .
			"\$global = (object) array(" .
				"'properties' => array()," .
				"'attributes' => array()," .
				"'getters' => array()," .
				"'setters' => array()," .
				"'prototype' => NULL," .
				"'up' => NULL," .
			");" .
			"\$set_scope = TRUE;" .
			"\$global->trace = array(array(" . var_export($file, TRUE) . ", NULL, NULL)); \$global->trace_sp = 0;" .
		"}";

	$body[] = "if (\$scope === NULL) {" .
			"\$scope = (object) array('properties' => array(), 'attributes' => array(), 'up' => \$global);" .
			"\$scope->properties['global'] = \$global;" .
			"\$scope->properties['__filename'] = " . var_export($file, TRUE) . ";" .
			"\$scope->properties['__dirname'] = " . var_export(dirname($file), TRUE) . ";" .
		"}";

	$body[] = "if (isset(\$global->properties['require'])) {" .
			"\$global->properties['require']->properties['.'] = " . var_export(dirname($file), TRUE) . ";" .
			"\$global->properties['require']->attributes['.'] = 0;" .
		"}";

	$body[] = 'if (isset($set_scope)) { $global->scope = array($scope); $global->scope_sp = 0; }';
	$body[] = '$leThis = $global;';

	$code = WALK($ast);

	if (!empty($self->prestatement)) {
		$body[] = implode("\n", $self->prestatement);
	}

	if (!empty($code)) {
		$body[] = $code;
	}
	$body[] = ';';
	$body[] = 'return JS::$undefined;';
	$body[] = '}';

	$self->functions[$fn] = implode("\n", $body);
}

genvar_() -> '$x' . $self->varCounter++

genfn_() -> '_' . $self->prefix . '_' . $self->fnCounter++

varize_(identifier) -> '$_' . str_replace(array('$', '_'), array('_dlr_', '__'), $identifier)

TypeError_(msg, p, file) {
	$saved_assigned = $self->assigned;
	$error = WALK(array('call',
		array('identifier', 'TypeError', $p, $file, FALSE),
		array(array('string', $msg)), $p, $file));
	$self->prestatement[] = WALK(array('throw', array('raw', $error), $p, $file));
	$self->assigned = $saved_assigned;
}

ReferenceError_(msg, p, file) {
	$saved_assigned = $self->assigned;
	$error = WALK(array('call',
		array('identifier', 'ReferenceError', $p, $file, FALSE),
		array(array('string', $msg)), $p, $file));
	$self->prestatement[] = WALK(array('throw', array('raw', $error), $p, $file));
	$self->assigned = $saved_assigned;
}

// STATEMENTS

block(statements) {
	$ret = array();
	foreach ($statements as $statement) {
		if ($statement === NULL) {
			continue;
		}

		$s = WALK($statement);

		if (!empty($s)) {
			$s = trim($s);
			if (substr($s, -1) !== ';') {
				$s .= ';';
			}
			$ret[] = $s;
		}
	}

	return implode("\n", $ret);
}

php_statement(parts) {
	$ret = array();
	$parts = WALKEACH($parts);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = implode('', $parts);
	return implode("\n", $ret);
}

function(name, parameters_list, body, pStart, pEnd, file) {
	$fn = WALK(array('genfn_'));

	$saved_prestatement = $self->prestatement;
	$saved_assigned = $self->assigned;
	$self->prestatement = array();
	$self->assigned = array();

	$ret = WALK(array('genvar_'));
	$arguments = WALK(array('genvar_'));

	$self->prestatement[] = 'if (isset($fn->boundThis) && !$constructor) { $leThis = $fn->boundThis; }';
	$self->prestatement[] = 'if (isset($fn->boundArgs)) { $args = array_merge($fn->boundArgs, $args); }';

	$self->prestatement[] = '$scope = clone JS::$emptyScope;';
	$self->prestatement[] = '$scope->up = $fn->scope;';

	if (!in_array('arguments', $parameters_list)) {
		$self->prestatement[] = '$scope->properties[\'arguments\'] = clone JS::$argumentsTemplate;';
		$self->prestatement[] = $arguments . ' =& $scope->properties[\'arguments\'];';
		$self->prestatement[] = $arguments . '->properties[\'length\'] = count($args);';
		$self->prestatement[] = 'foreach ($args as $i => $arg) {';
		$self->prestatement[] = $arguments . '->properties[$i] = $args[$i];';
		$self->prestatement[] = $arguments . '->attributes[$i] = JS::WRITABLE | JS::ENUMERABLE | JS::CONFIGURABLE;';
		$self->prestatement[] = '}';
	}

	foreach ($parameters_list as $i => $parameter) {
		$self->assigned[$parameter] = WALK(array('varize_', $parameter));
		$self->prestatement[] = '$scope->properties[' . var_export($parameter, TRUE) . '] = ' .
			'array_key_exists(' . $i . ', $args) ? $args[' . $i . '] : JS::$undefined;';
		$self->prestatement[] = $self->assigned[$parameter] . ' =& $scope->properties[' .
			var_export($parameter, TRUE) . '];';
		$self->prestatement[] = '$U' . substr($self->assigned[$parameter], 2) . ' = FALSE;';
	}

	if (!empty($name) && !in_array($name, $parameters_list)) {
		$self->assigned[$name] = WALK(array('varize_', $name));
		$self->prestatement[] = '$scope->properties[' . var_export($name, TRUE) . '] = $fn;';
		$self->prestatement[] = $self->assigned[$name] . ' =& $scope->properties[' . var_export($name, TRUE) . '];';
	}

	$self->prestatement[] = '$global->scope[++$global->scope_sp] = $scope;';

	$body = WALK($body);
	$self->functions[$fn] = implode("\n", array('function ' . $fn . '($global, $leThis, $fn, $args, $constructor = FALSE) {',
		implode("\n", $self->prestatement), $body, ';', 'return JS::$undefined;', '}'));
	$self->prestatement = $saved_prestatement;
	$self->assigned = $saved_assigned;

	$var = WALK(array('genvar_'));
	$self->prestatement[] = $var . ' = clone JS::$functionTemplate; ' .
		$var . '->call = ' . var_export($fn, TRUE) . '; ' .
		$var . '->parameters = ' . var_export($parameters_list, TRUE) . '; ' .
		($name !== NULL ? $var . '->name = ' . var_export($name, TRUE) . '; ' : '') .
		$var . '->scope = $scope; ' .
		($self->loader !== NULL ? $var . '->loaded = FALSE; ' : '') .
		($self->dumpFunctions
			? $var . '->string = ' . var_export($self->dumper->__invoke(NODE()), TRUE) . ';'
			: '') .
		$var . '->properties[\'prototype\'] = clone JS::$objectTemplate; ' .
		$var . '->attributes[\'prototype\'] = JS::WRITABLE; ' .
		$var . '->properties[\'prototype\']->properties[\'constructor\'] = ' . $var . '; ' .
		$var . '->properties[\'prototype\']->attributes[\'constructor\'] = JS::WRITABLE | JS::CONFIGURABLE; ' .
		$var . '->properties[\'length\'] = ' . count($parameters_list) . '; ' .
		$var . '->attributes[\'length\'] = 0;';
	
	return $var;
}

var(declarations_list) {
	$ret = '';

	foreach ($declarations_list as $declaration) {
		list($varname, $expr) = $declaration;
		$phpVarname = WALK(array('varize_', $varname));

		if (isset($self->assigned[$varname]) && !$expr) {
			$ret = $phpVarname;
			continue;
		}

		if (!$expr) {
			$expr = array('raw', 'JS::$undefined');
		}

		$expr = WALK($expr);

		if (isset($self->assigned[$varname])) {
			$self->prestatement[] = 'unset(' . $self->assigned[$varname] . ');';
		}

		$self->prestatement[] = '$scope->properties[' . var_export($varname, TRUE) . '] = JS::$undefined; ' .
			$phpVarname . ' =& $scope->properties[' . var_export($varname, TRUE) . '];';
		$self->assigned[$varname] = $ret = $phpVarname;
		$self->prestatement[] = '$U' . substr($phpVarname, 2) . ' = FALSE;';

		$self->prestatement[] = $phpVarname . ' = ' . $expr . ';';
	}

	return $ret;
}

if(cond_expr, statement, else_statement) {
	$ret = array();

	$cond_expr = WALK($cond_expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = 'if (JS::toBoolean(' . $cond_expr . ', $global)) {';
	$saved_assigned = $self->assigned;
	$ret[] = WALK($statement) . ';';
	$self->assigned = $saved_assigned;
	$ret[] = '}';

	if ($else_statement !== NULL) {
		$ret[] = 'else {';
		$saved_assigned = $self->assigned;
		$ret[] = WALK($else_statement) . ';';
		$self->assigned = $saved_assigned;
		$ret[] = '}';
	}

	return implode("\n", $ret);
}

do(cond_expr, statement) {
	$ret = array();

	// does not need to save $self->assigned, everything is done at least once
	$statement = WALK($statement);
	$ret[] = 'do {';
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $statement . ';';

	$cond_expr = WALK($cond_expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = '} while(' . $cond_expr . ');';

	return implode("\n", $ret);
}

while(cond_expr, statement) {
	$ret = array();

	$ret[] = 'for (;;) {';

	$cond = WALK($cond_expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = 'if (!JS::toBoolean(' . $cond . ', $global)) { break; }';

	$saved_assigned = $self->assigned;
	$statement = WALK($statement);
	$self->assigned = $saved_assigned;
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $statement . ';';

	$ret[] = '}';

	return implode("\n", $ret);
}

for_in(assignment_expr, in_expr, statement) {
	$ret = array();
	$tmp = WALK(array('genvar_'));
	$keys = WALK(array('genvar_'));

	$in_expr = WALK($in_expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();

	$assignment_expr = WALK($assignment_expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();

	$ret[] = "if ($in_expr !== JS::\$undefined && $in_expr !== NULL) {";
	$ret[] = "for ($keys = array(), $tmp = JS::toObject($in_expr, \$global); $tmp; $tmp = {$tmp}->prototype) {";

	$ret[] = 'foreach (' . $tmp . '->attributes as $property => $attributes) {';
	$ret[] = "if (!(\$attributes & JS::ENUMERABLE) || isset({$keys}[\$property])) { continue; }";
	$ret[] = "{$keys}[\$property] = TRUE;";

	$ret[] = $assignment_expr . ' = $property;';

	$saved_assigned = $self->assigned;
	$statement = WALK($statement);
	$self->assigned = $saved_assigned;
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $statement . ';';

	$ret[] = '}';

	$ret[] = '}';

	$ret[] = '}';

	return implode("\n", $ret);
}

for(init_expr, cond_expr, iter_expr, statement) {
	$ret = array();
	$counter = WALK(array('genvar_'));

	$ret[] = 'for (' . $counter . ' = 0;; ++' . $counter . ') {';

	if ($init_expr !== NULL) {
		$ret[] = 'if (' . $counter . ' === 0) {';
		WALK($init_expr);
		$ret[] = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$ret[] = '}';
	}

	if ($iter_expr !== NULL) {
		$ret[] = 'if (' . $counter .' !== 0) {';
		$saved_assigned = $self->assigned;
		WALK($iter_expr);
		$self->assigned = $saved_assigned;
		$ret[] = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$ret[] = '}';
	}

	if ($cond_expr !== NULL) {
		$cond = WALK($cond_expr);
		$ret[] = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$ret[] = 'if (!JS::toBoolean(' . $cond . ', $global)) { break; }';
	}

	$saved_assigned = $self->assigned;
	$statement = WALK($statement);
	$self->assigned = $saved_assigned;
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $statement . ';';

	$ret[] = '}';

	return implode("\n", $ret);
}

continue(label) {
	if ($label) {
		throw new Exception('Labels not implemented.');
	}

	return 'continue;';
}

break(label) {
	if ($label) {
		throw new Exception('Labels not implemented.');
	}

	return 'break;';
}

return(expr) {
	$ret = array();

	$expr = WALK($expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();

	if ($self->catch_return) {
		$ret[] = 'throw new JSCatchReturn;';
	} else {
		$ret[] = 'return ' . $expr . ';';
	}

	return implode("\n", $ret);
}

with(expr, statement, p, file) {
	$ret = array();

	$expr = WALK($expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();

	if ($expr[0] !== '$') {
		$tmp = WALK(array('genvar_'));
		$self->prestatement[] = "$tmp = $expr;";
		$expr = $tmp;
	}

	$self->prestatement[] = "if ($expr === JS::\$undefined || $expr === NULL) {";
	WALK(array('TypeError_', 'Supplied value has no properties.', $p, $file));
	$self->prestatement[] = "}";

	$self->prestatement[] = "{$expr}->up = \$scope; " .
		"\$scope = clone JS::\$emptyScope; " .
		"\$scope->up = {$expr};;";

	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$self->assigned = array(); // flush assigned variables
	$ret[] = WALK($statement);
	$ret[] = '; foreach ($scope->properties as $k => $v) { $scope->up->up->properties[$k] = $v; }';
	$tmp = WALK(array('genvar_'));
	$ret[] = "$tmp = \$scope->up; " .
		"\$scope = \$scope->up->up; " .
		"unset({$tmp}->up);";
	$self->assigned = array(); // flush assigned variables

	return implode("\n", $ret);
}

labelled(label, statement) {
	throw new Exception('Labels not implemented.');
}

switch(expr, clauses_list) {
	// FIXME
	$ret = array();

	$expr = WALK($expr);
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = 'switch (' . $expr . ') {';

	$ret = array_merge($ret, WALKEACH($clauses_list));

	$ret[] = '}';

	return implode("\n", $ret);
}

case(expr, statement) {
	// FIXME
	$ret = array();
	$ret[] = 'case ' . WALK($expr) . ':';
	$saved_assigned = $self->assigned;
	$statement = WALK($statement);
	$self->assigned = $saved_assigned;
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $statement . ';';

	return implode("\n", $ret);
}

default(statement) {
	// FIXME
	$ret = array();
	$ret[] = 'default:';
	$saved_assigned = $self->assigned;
	$statement = WALK($statement);
	$self->assigned = $saved_assigned;
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $statement . ';';
	
	return implode("\n", $ret);
}

throw(expr, p, file) {
	$ret = array();
	$expr = WALK($expr);

	if ($expr[0] !== '$') {
		$tmp = WALK(array('genvar_'));
		$self->prestatement[] = "$tmp = $expr;";
		$expr = $tmp;
	}

	$self->prestatement[] = "if (isset({$expr}->class) && {$expr}->class === 'Error' && " .
		"!isset({$expr}->properties['file']) && !isset({$expr}->properties['line']) && " .
		"!isset({$expr}->properties['column'])) {" .
			"{$expr}->properties['file'] = " . WALK($file) . ";" .
			"{$expr}->properties['line'] = " . WALK($p[0]) . ";" .
			"{$expr}->properties['column'] = " . WALK($p[1]) . ";" .
			"{$expr}->attributes['file'] = {$expr}->attributes['line'] = {$expr}->attributes['column'] = 0; }";

	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = "throw new JSException($expr, " . WALK($p[0]) . ", " . WALK($p[1]) . ", " . WALK($file) . ");";

	return implode("\n", $ret);
}

try(try_block, catch_var, catch_block, finally_block) {
	$ret = array(implode("\n", $self->prestatement));
	$self->prestatement = array();
	$finally = '';

	if ($finally_block) {
		$saved_assigned = $self->assigned;
		$finally_block = WALK($finally_block);
		$finally = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$finally .= "\n" . $finally_block . ';';
		$self->assigned = $saved_assigned;
	}

	if (!empty($finally)) {
		$ret[] = 'try {';
	}

	$ret[] = 'try {';
	$saved_assigned = $self->assigned;
	$try_block = WALK($try_block);
	$self->assigned = $saved_assigned;
	$ret[] = implode("\n", $self->prestatement);
	$self->prestatement = array();
	$ret[] = $try_block . ';';
	$ret[] = '}';
	
	if ($catch_block === NULL) {
		$ret[] = 'catch (JSException $e) {}';

	} else {
		$saved_assigned = $self->assigned;
		$self->catch_return = !empty($finally);
		$catch_block = WALK($catch_block);
		$catch_block = implode("\n", $self->prestatement) . $catch_block;
		$self->prestatement = array();
		$self->catch_return = FALSE;
		$self->assigned = $saved_assigned;

		$ret[] = 'catch (JSException $e) {';
		WALK(array('var', array(array($catch_var, array('raw', '$e->value'))))); // FIXME: leaks into current scope
		$ret[] = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$ret[] = $catch_block . ';';
		$ret[] = '}';

		$ret[] = 'catch (Exception $e) {';
		$e = WALK(array('var', array(array($catch_var, array('raw', 'JS::fromNative($e)'))))); // FIXME: leaks into current scope
		$ret[] = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$ret[] = "if (!isset({$e}->properties['name'])) {" .
			"{$e}->properties['name'] = {$e}->class;" .
			"{$e}->attributes['name'] = 0; }";
		$ret[] = implode("\n", $self->prestatement);
		$self->prestatement = array();
		$ret[] = $catch_block . ';';
		$ret[] = '}';
	}

	if (!empty($finally)) {
		$ret[] = '$processingFinally = TRUE;';
		$ret[] = $finally;
		$ret[] = '} catch (Exception $e) {';
		$ret[] = 'if (!isset($processingFinally)) {';
		$ret[] = $finally;
		$ret[] = '}';
		$ret[] = 'if ($e instanceof JSCatchReturn) { return $e->value; }';
		$ret[] = 'throw $e;';
		$ret[] = '}';
	}

	return implode("\n", $ret);
}

discard(expr) {
	WALK($expr);
	$ret = $self->prestatement;
	$self->prestatement = array();
	return implode("\n", $ret);
}


// EXPRESSIONS

exprs(exprs) {
	foreach ($exprs as $expr) {
		$last = WALK($expr);
	}

	return $last;
}

assignment(op, lhs_expr, rhs_expr, p, file) {
	$rhs = WALK($rhs_expr);

	if ($rhs[0] !== '$') {
		$tmp = WALK(array('genvar_'));
		$self->prestatement[] = "$tmp = $rhs;";
		$rhs = $tmp;
	}

	if ($lhs_expr[0] === 'identifier') {
		$lhs = WALK(array('lookup_', '$scope', $lhs_expr[1], 'up', TRUE, FALSE, $p, $file));

		$self->prestatement[] = 'if ($U' . substr($lhs, 2) . ') {' .
			'$global->properties[' . var_export($lhs_expr[1], TRUE) . '] = ' .
			$lhs . '; ' . $lhs . ' =& $global->properties[' . var_export($lhs_expr[1], TRUE) . ']; }';

	} else if ($lhs_expr[0] === 'index') {
		list(,$base, $index) = $lhs_expr;
		$base = WALK($base);
		$index = WALK($index);

		if ($base[0] !== '$') {
			$tmp = WALK(array('genvar_'));
			$self->prestatement[] = $tmp . ' = ' . $base . ';';
			$base = $tmp;
		}

		$tmpIndex = WALK(array('genvar_'));
		$self->prestatement[] = "$tmpIndex = JS::toString($index, \$global);";

		$self->prestatement[] = "if ($base === JS::\$undefined || $base === NULL) {";
		WALK(array('TypeError_', 'Cannot assign property of undefined/null.', $p, $file));
		$self->prestatement[] = "}";
		$self->prestatement[] = $base . ' = JS::toObject(' . $base . ', $global);';

		$lhs = WALK(array('lookup_', $base, $tmpIndex, 'prototype', FALSE, FALSE, $p, $file));

		$self->prestatement[] = 'if ($U' . substr($lhs, 2) . ' && (!isset(' . 
			$base . '->extensible) || ' . $base . '->extensible)) {' .
			$base . '->properties[' . $tmpIndex . '] = ' .
			$lhs . '; ' . $lhs . ' =& ' . $base . '->properties[' . $tmpIndex . ']; ' .
			$base . '->attributes[' . $tmpIndex . '] = JS::WRITABLE | JS::ENUMERABLE | JS::CONFIGURABLE; ' .
			'$U' . substr($lhs, 2) . ' = FALSE; $W' . substr($lhs, 2) . ' = TRUE; }';

	} else {
		WALK(array('ReferenceError_', 'Invalid left-hand side in assignment.', $p, $file));
		return '';
	}

	if ($op !== '=') {
		$rhs = WALK(array('binary', substr($op, 0, -1), array('raw', $lhs), array('raw', $rhs), $p, $file));
	}

	if ($lhs_expr[0] === 'index') {
		$ret = WALK(array('genvar_'));
		$tmp = WALK(array('genvar_'));

		$self->prestatement[] = "if (isset({$base}->class) && {$base}->class === 'Array') { " .
			"if (isset({$base}->properties['length']) && {$base}->properties['length'] !== JS::\$undefined) { " .
				"$tmp = {$base}->properties['length']; } " .
			"else { $tmp = 0; } }";

		$self->prestatement[] = 'if (isset($S' . substr($lhs, 2) . ')) {';
		$self->prestatement[] =
			$ret . ' = ' . WALK(array('call_', '$S' . substr($lhs, 2), array($rhs), $base, FALSE, $p, $file, FALSE)) . ';';
		$self->prestatement[] = '} else {';
		$self->prestatement[] = 'if (!$U' . substr($lhs, 2) . ') {' .
			$ret . ' = ' . $rhs . ';' .
			'if ($W' . substr($lhs, 2) . ') { ' . $lhs . ' = ' . $rhs . '; } ' .
			' }';
		$self->prestatement[] = 'else { ' . $ret . ' = JS::$undefined; }';
		$self->prestatement[] = '}';

		$self->prestatement[] = "if (isset({$base}->class) && {$base}->class === 'Array') {" .
				"if (is_int($index) && $index >= {$base}->properties['length']) { " .
					"{$base}->properties['length'] = $index + 1; }" .
				"else if ($tmpIndex === 'length' && is_int($rhs) && $tmp > $rhs) { " .
					"for (\$i = $rhs; \$i < $tmp; ++\$i) { " .
						"unset({$base}->properties[\$i], {$base}->attributes[\$i]); }" .
				"}" .
			"}";

		return $ret;

	} else {
		$self->prestatement[] = $lhs . ' = ' . $rhs . ';';
		return $lhs;
	}
}

lookup_(base, id, up, assign, get, p, file) {
	if (isset($self->assigned[$id])) {
		return $self->assigned[$id];
	}

	if ($assign) {
		$var = WALK(array('varize_', $id));
		$self->assigned[$id] = $var;
	} else {
		$var = WALK(array('genvar_'));
	}

	if ($assign) {
		$id = var_export($id, TRUE);
	}

	$v = substr($var, 2);
	$throw = !in_array($base, array('$scope', '$global'));

	if (!isset($self->lookups[$get][$throw][$up])) {
		$fn = WALK(array('genfn_'));
		$saved_prestatement = $self->prestatement;
		$self->prestatement = array();
		$body[] = "function $fn(\$global, \$scope, \$base, \$id, \$line, \$column, \$file) {";


		if ($throw) {
			$self->prestatement[] = 'if ($base === JS::$undefined || $base === NULL) {';
			WALK(array('TypeError_', 'Cannot lookup property of undefined/null.', array(array('raw', '$line'), array('raw', '$column')), array('raw', '$file')));
			$self->prestatement[] = '}';
		}

		$self->prestatement[] = "\$W$v = \$S$v = \$U$v = NULL;";
		$self->prestatement[] = '$lookup = JS::toObject($base, $global);';

		if ($get || !$throw) {
			$self->prestatement[] =
				'for (; $lookup && !(array_key_exists($id, $lookup->properties) || ' .
				'isset($lookup->attributes[$id])) && ' .
				'isset($lookup->' . $up . '); $lookup = $lookup->' . $up . ');';
		}

		$self->prestatement[] = 'if (array_key_exists($id, $lookup->properties)) { ' .
			$var . ' =& $lookup->properties[$id]; ' .
			(!$get ? ('$W' . substr($var, 2) . ' = !isset($lookup->attributes[$id]) || ' .
				'($lookup->attributes[$id] & JS::WRITABLE !== 0);') : '') .
			'}';

		if ($get) {
			$self->prestatement[] = 'else if (isset($lookup->attributes[$id]) && ' .
				'$lookup->attributes[$id] & JS::HAS_GETTER) { ';
			$self->prestatement[] =
				$var . ' = ' . WALK(array('call_', '$lookup->getters[$id]', array(), '$lookup', FALSE, array(array('raw', '$line'), array('raw', '$column')), array('raw', '$file'), FALSE)) . '; }';

		} else {
			$self->prestatement[] = 'else if (isset($lookup->attributes[$id]) && ' .
				'$lookup->attributes[$id] & JS::HAS_SETTER) { ' .
					'$S' . substr($var, 2) . ' = $lookup->setters[$id]; ' .
				'}';
		}

		$self->prestatement[] = 'else { ' . $var . ' = JS::$undefined; $U' . substr($var, 2) . ' = TRUE; }';


		$body[] = implode("\n", $self->prestatement);

		$body[] = "return array(&$var, \$W$v, \$S$v, \$U$v);";
		$body[] = "}";

		$self->functions[$fn] = implode("\n", $body);
		$self->prestatement = $saved_prestatement;
		$self->lookups[$get][$throw][$up] = $fn;
	}

	$self->prestatement[] = "unset($var, \$W$v, \$S$v, \$U$v);";
	$tmp = WALK(array('genvar_'));
	$self->prestatement[] =
		"$tmp = {$self->lookups[$get][$throw][$up]}(\$global, \$scope, $base, JS::toString($id, \$global), " .
		WALK($p[0]) . ", " . WALK($p[1]) . ", " . WALK($file) . ");";
	$self->prestatement[] = "$var =& {$tmp}[0]; list(,\$W$v,\$S$v,\$U$v) = $tmp;";

	return $var;
}

call_(function, args, leThis, check, p, file, constructor) {
	$call = WALK(array('genvar_'));
	$ret = WALK(array('genvar_'));

	if ($check) {
		$self->prestatement[] = 'if (!(is_object(' . $function . ') && isset(' . $function . '->call))) { ';
		WALK(array('TypeError_', 'Trying to call what is not a function.', $p, $file));
		$self->prestatement[] = '}';
	}

	if ($self->loader !== NULL) {
		$self->prestatement[] = "if (isset({$function}->loaded) && !{$function}->loaded) { " .
			"{$self->loader}({$function}, \$global); }";
	}

	$self->prestatement[] = $call . ' = ' . $function . '->call;';
	$self->prestatement[] = "\$global->trace[++\$global->trace_sp] = array(" . WALK($file) . ", " . WALK($p[0]) . ", " . WALK($p[1]) . ");";
	$self->prestatement[] = $ret . ' = ' . $call . '($global, ' . $leThis . ', ' . $function .
		', array(' . implode(', ', $args) . '), ' . var_export($constructor, TRUE) . ');';
	$self->prestatement[] = "unset(\$global->trace[\$global->trace_sp--], \$global->scope[\$global->scope_sp--]);";

	return $ret;
}

cond(cond_expr, iftrue_expr, iffalse_expr) {
	$ret = WALK(array('genvar_'));
	$cond_expr = WALK($cond_expr);

	$self->prestatement[] = 'if (JS::toBoolean(' . $cond_expr . ', $global)) {';

	$saved_assigned = $self->assigned;
	$iftrue_expr = WALK($iftrue_expr);
	$self->assigned = $saved_assigned;

	$self->prestatement[] = $ret . ' = ' . $iftrue_expr . ';';

	$self->prestatement[] = '} else {';

	$saved_assigned = $self->assigned;
	$iffalse_expr = WALK($iffalse_expr);
	$self->assigned = $saved_assigned;

	$self->prestatement[] = $ret . ' = ' . $iffalse_expr . ';';

	$self->prestatement[] = '}';

	return $ret;
}

binary(op, left_expr, right_expr, p, file) {
	switch ($op) {
		case '/':
			$ret = WALK(array('genvar_'));
			$l = WALK($left_expr);
			$r = WALK($right_expr);
			$self->prestatement[] = "if (JS::toNumber($r, \$global) == 0) { " .
				"$ret = ((string) JS::toNumber($r, \$global)) === '-0' ? -INF : INF; } " .
				"else { $ret = JS::toNumber($l, \$global) / JS::toNumber($r, \$global); }";
			return $ret;

		case '*':
		case '%':
		case '-':
			return '(JS::toNumber(' . WALK($left_expr) . ', $global) ' . $op .
				' JS::toNumber(' . WALK($right_expr) . ', $global))';

		case '<<':
		case '>>':
		case '&':
		case '|':
			$l = WALK($left_expr);
			$r = WALK($right_expr);

			$tmpL = WALK(array('genvar_'));
			$tmpR = WALK(array('genvar_'));
			$ret = WALK(array('genvar_'));

			$self->prestatement[] = "$tmpL = JS::toNumber($l, \$global);";
			$self->prestatement[] = "$tmpR = JS::toNumber($r, \$global);";

			$l = $tmpL;
			$r = $tmpR;

			$self->prestatement[] = "if (is_nan($l)) { $l = 0; }";
			$self->prestatement[] = "if (is_nan($r)) { $r = 0; }";
			$self->prestatement[] = "$ret = $l $op $r;";

			return $ret;

		case '+':
			$l = WALK(array('genvar_'));
			$r = WALK(array('genvar_'));
			$left_expr = WALK($left_expr);
			$right_expr = WALK($right_expr);

			$self->prestatement[] = $l . ' = JS::toPrimitive(' . $left_expr . ', $global);';
			$self->prestatement[] = $r . ' = JS::toPrimitive(' . $right_expr . ', $global);';

			return '(is_string(' . $l . ') || is_string(' . $r . ') ' .
				'? JS::toString(' . $l . ', $global) . JS::toString(' . $r . ', $global) ' .
				': JS::toNumber(' . $l . ', $global) + JS::toNumber(' . $r . ', $global))';

		case '<':
		case '>':
		case '<=':
		case '>=':
			$not = FALSE;
			$l = WALK(array('genvar_'));
			$r = WALK(array('genvar_'));
			$result = WALK(array('genvar_'));
			$left_expr = WALK($left_expr);
			$right_expr = WALK($right_expr);

			$self->prestatement[] = $l . ' = JS::toPrimitive(' . $left_expr . ', $global);';
			$self->prestatement[] = $r . ' = JS::toPrimitive(' . $right_expr . ', $global);';

			if ($op === '<') { // ok
			} else if ($op === '>') {
				$tmp = $r;
				$r = $l;
				$l = $tmp;

			} else if ($op === '<=') {
				$tmp = $r;
				$r = $l;
				$l = $tmp;
				$not = TRUE;
			} else if ($op === '>=') {
				$not = TRUE;
			}

			$tmpL = WALK(array('genvar_'));
			$tmpR = WALK(array('genvar_'));

			$self->prestatement[] = $result . ' = ' . ($not ? '!' : '') .
				'(is_string(' . $l . ') && is_string(' . $r . ') ? strcmp(' . $l . ', ' .  $r . ') < 0 : ' .
				"(!is_nan($tmpL = JS::toNumber($l, \$global)) && !is_nan($tmpR = JS::toNumber($r, \$global)) && " .
				"$tmpL < $tmpR));";

			return $result;

		case 'instanceof':
			$ret = WALK(array('genvar_'));
			$tmp = WALK(array('genvar_'));
			$l = WALK($left_expr);
			$r = WALK($right_expr);

			$self->prestatement[] = 'if (!is_object(' . $r . ') || ' . $r . ' === JS::$undefined || !isset(' . $r . '->call)) {';
			WALK(array('TypeError_', 'Right-hand side of instanceof operator is not a function.', $p, $file));
			$self->prestatement[] = '}';

			$r = WALK(array('index', array('raw', $r), array('string', 'prototype'), $p, $file));

			$self->prestatement[] = $ret . ' = FALSE;';
			$self->prestatement[] =
				"if (is_object($l) && $l !== JS::\$undefined) { " .
					"for ($tmp = $l, $tmp = {$tmp}->prototype; $tmp; $tmp = {$tmp}->prototype) { " .
						"if ($tmp === {$r}) { $ret = TRUE; break; } " .
					"} " .
				"}";

			return $ret;

		case 'in':
			$l = WALK($left_expr);
			$r = WALK($right_expr);

			if ($l[0] !== '$') {
				$tmp = WALK(array('genvar_'));
				$self->prestatement[] = $tmp . ' = ' . $l . ';';
				$l = $tmp;
			}

			if ($r[0] !== '$') {
				$tmp = WALK(array('genvar_'));
				$self->prestatement[] = "$tmp = $r;";
				$r = $tmp;
			}

			$self->prestatement[] = $l . ' = JS::toString(' . $l . ', $global);';
			$self->prestatement[] = 'if (!is_object(' . $r . ') || ' . $r . ' === JS::$undefined) {';
			WALK(array('TypeError_', 'Right-hand side of in operator is not an object.', $p, $file));
			$self->prestatement[] = '}';
			
			return '(array_key_exists(' . $l . ', ' . $r . '->properties) || ' .
				'array_key_exists(' . $l . ', ' . $r . '->attributes))';

		case '==':
		case '!=':
			$ret = WALK(array('genvar_'));
			$tmpL = WALK(array('genvar_'));
			$tmpR = WALK(array('genvar_'));
			$l = WALK($left_expr);
			$r = WALK($right_expr);
			
			$self->prestatement[] = $tmpL . ' = ' . $l . ';';
			$self->prestatement[] = $tmpR . ' = ' . $r . ';';
			$l = $tmpL;
			$r = $tmpR;

			$self->prestatement[] = 'if (gettype(' . $l . ') === gettype(' . $r . ')) { ' .
				$ret . ' = ' . $l . $op . '=' . $r . '; }';
			$self->prestatement[] = "else if ($l === JS::\$undefined && $r === NULL || " .
				"$l === NULL && $r === JS::\$undefined) { $ret = " . ($op === '!=' ? 'FALSE' : 'TRUE') . "; }";
			$self->prestatement[] = "else if ($l === NULL || $r === NULL) { $ret = " . ($op === '!=' ? 'TRUE' : 'FALSE') . "; }";
			$self->prestatement[] = 'else { ' . $l . ' = JS::toPrimitive(' . $l . ', $global); ' .
				$r . ' = JS::toPrimitive(' . $r . ', $global); ';
			$self->prestatement[] = "if (is_bool($l)) { $l = (int) $l; }";
			$self->prestatement[] = "if (is_bool($r)) { $r = (int) $r; }";
			$self->prestatement[] = 'if (is_numeric(' . $l . ') || is_numeric(' . $r . ')) { ' .
				$l . ' = JS::toNumber(' . $l . ', $global); ' .
				$r . ' = JS::toNumber(' . $r . ', $global); }';
			$self->prestatement[] = $ret . ' = ' . $l . $op . '=' . $r . ';}';

			return $ret;

		case '===':
		case '!==':
			$ret = WALK(array('genvar_'));
			$l = WALK($left_expr);
			$r = WALK($right_expr);

			$self->prestatement[] = $ret . ' = ' . ($op === '!==' ? '!' : '') .
				'(((gettype(' . $l . ') === gettype(' . $r . ') && ' .
				$l . ' === ' . $r . '))' .
				"|| (((is_float($l) || is_int($l)) && (is_float($r) || is_int($r))) && $l == $r));";

			return $ret;

		case '&&':
			$ret = WALK(array('genvar_'));
			$l = WALK($left_expr);

			$self->prestatement[] = $ret . ' = ' . $l . ';';
			$self->prestatement[] = 'if (JS::toBoolean(' . $ret . ', $global)) {';
			$saved_assigned = $self->assigned;
			$r = WALK($right_expr);
			$self->assigned = $saved_assigned;
			$self->prestatement[] = $ret . ' = ' . $r . '; }';

			return $ret;

		case '||':
			$ret = WALK(array('genvar_'));
			$l = WALK($left_expr);

			$self->prestatement[] = $ret . ' = ' . $l . ';';
			$self->prestatement[] = 'if (!JS::toBoolean(' . $ret . ', $global)) {';
			$saved_assigned = $self->assigned;
			$r = WALK($right_expr);
			$self->assigned = $saved_assigned;
			$self->prestatement[] = $ret . ' = ' . $r . '; }';

			return $ret;

		case '>>>':
		case '^':
		default:
			throw new Exception('Operator ' . $op . ' not implemented.');
	}
}

delete(expr, p, file) {
	$ret_var = WALK(array('genvar_'));

	if ($expr[0] === 'call') {
		WALK($expr);
		return 'TRUE';

	} else if ($expr[0] === 'identifier') {
		$base = WALK(array('genvar_'));
		$index = var_export($expr[1], TRUE);
		$self->prestatement[] =
			"for ($base = \$scope; $base && {$base}->up && !array_key_exists($index, " .
			"{$base}->attributes) && !array_key_exists($index, {$base}->properties); $base = {$base}->up);";

	} else if ($expr[0] === 'index') {
		list(,$base, $index) = $expr;
		$base = WALK($base);
		$index = WALK($index);

	} else {
		WALK(array('ReferenceError_', 'Invalid delete expression.', $p, $file));
	}

	if (isset($base) && isset($index)) {
		$self->prestatement[] = 'if (!array_key_exists(' . $index . ', ' . $base . '->attributes)) { ' .
			'unset(' . $base . '->properties[' . $index . ']' .
			($expr[0] === 'identifier' && isset($self->assigned[$expr[1]]) ? ', ' .
				$self->assigned[$expr[1]] : '') . '); ' .
			$ret_var . ' = TRUE; }';
		$self->prestatement[] = 'else if (' . $base . '->attributes[' . $index . '] & JS::CONFIGURABLE) { ' .
			'unset(' . $base . '->properties[' . $index . '], ' . $base . '->attributes[' . $index . '], ' .
			$base . '->getters[' . $index . '], ' . $base . '->setters[' . $index . ']' .
			($expr[0] === 'identifier' && isset($self->assigned[$expr[1]]) ? ', ' .
				$self->assigned[$expr[1]] : '') . '); ' .
			$ret_var . ' = TRUE; }';
		$self->prestatement[] = 'else { ' . $ret_var . ' = FALSE; }';

		if ($expr[0] === 'identifier') {
			unset($self->assigned[$expr[1]]);
		}
	}

	return $ret_var;
}

void(expr) {
	WALK($expr);
	return 'JS::$undefined';
}

typeof(expr) {
	$expr = WALK($expr);
	$ret = WALK(array('genvar_'));
	$self->prestatement[] = $ret . ' = ' . $expr . ';';
	$self->prestatement[] = $ret . " = ({$ret} === JS::\$undefined ? 'undefined' : (" .
		"is_int($ret) || is_float($ret) ? 'number' : (" .
		"is_bool($ret) ? 'boolean' : (" .
		"is_string($ret) ? 'string' : (" .
		"is_object($ret) && isset({$ret}->call) ? 'function' : 'object')))));";
	
	return $ret;
}

preinc(expr, p, file) {
	if ($expr[0] !== 'identifier' && $expr[0] !== 'index') {
		WALK(array('ReferenceError_', 'Invalid left-hand side in preincrement.', $p, $file));
		return 'JS::$undefined';
	}

	$expr = WALK($expr);
	$ret = WALK(array('genvar_'));
	$self->prestatement[] = $ret . ' = ++' . $expr . ';';
	return $ret;
}

predec(expr, p, file) {
	if ($expr[0] !== 'identifier' && $expr[0] !== 'index') {
		WALK(array('ReferenceError_', 'Invalid left-hand side in predecrement.', $p, $file));
		return 'JS::$undefined';
	}

	$expr = WALK($expr);
	$ret = WALK(array('genvar_'));
	$self->prestatement[] = $ret . ' = --' . $expr . ';';
	return $ret;
}

positive(expr) -> '(+JS::toNumber(' . WALK($expr) . ', $global))'

negative(expr) -> '(-1.0 * JS::toNumber(' . WALK($expr) . ', $global))'

inverse(expr) -> '(~JS::toNumber(' . WALK($expr) . ', $global))'

not(expr) -> '(!JS::toBoolean(' . WALK($expr) . ', $global))'

postinc(expr, p, file) {
	if ($expr[0] !== 'identifier' && $expr[0] !== 'index') {
		WALK(array('ReferenceError_', 'Invalid left-hand side in postincrement.', $p, $file));
		return 'JS::$undefined';
	}

	$expr = WALK($expr);
	$ret = WALK(array('genvar_'));
	$self->prestatement[] = $ret . ' = ' . $expr . ';';
	$self->prestatement[] = '++' . $expr . ';';
	return $ret;
}

postdec(expr, p, file) {
	if ($expr[0] !== 'identifier' && $expr[0] !== 'index') {
		WALK(array('ReferenceError_', 'Invalid left-hand side in postdecrement.', $p, $file));
		return 'JS::$undefined';
	}

	$expr = WALK($expr);
	$ret = WALK(array('genvar_'));
	$self->prestatement[] = $ret . ' = ' . $expr . ';';
	$self->prestatement[] = '--' . $expr . ';';
	return $ret;
}

call(fn_expr, arguments, p, file) {
	if ($fn_expr[0] === 'index') {
		list(,$base, $index) = $fn_expr;
		$base = WALK($base);
		$index = WALK($index);

		$tmp = WALK(array('genvar_'));

		$self->prestatement[] = "if ($base === JS::\$undefined || $base === NULL) {";
		WALK(array('TypeError_', 'Cannot call function on undefined/null.', $p, $file));
		$self->prestatement[] = "}";
		$self->prestatement[] = $tmp . ' = JS::toObject(' . $base . ', $global);';

		$fn = WALK(array('lookup_', $tmp, $index, 'prototype', FALSE, TRUE, $p, $file));

		return WALK(array('call_', $fn, WALKEACH($arguments), $tmp, TRUE, $p, $file, FALSE));

	} else {
		$check = !($fn_expr[0] === 'identifier' && preg_match('~Error$~', $fn_expr[1]));
		$fn = WALK($fn_expr);
		return WALK(array('call_', $fn, WALKEACH($arguments), '$global', $check, $p, $file, FALSE));
	}
}

index(base, index_expr, p, file) {
	$base = WALK($base);
	$index = WALK($index_expr);

	if ($base[0] !== '$') {
		$tmp = WALK(array('genvar_'));
		$self->prestatement[] = $tmp . ' = ' . $base . ';';
		$base = $tmp;
	}

	return WALK(array('lookup_', $base, $index, 'prototype', FALSE, TRUE, $p, $file));
}

new(expr, arguments_exprs_list, p, file) {
	$ret = WALK(array('genvar_'));
	$tmp = WALK(array('genvar_'));

	$constructor = WALK($expr);
	$arguments = WALKEACH($arguments_exprs_list);

	$self->prestatement[] = $ret . ' = clone JS::$objectTemplate;';
	$self->prestatement[] = $tmp . ' = ' .
		WALK(array('lookup_', $constructor, var_export('prototype', TRUE), 'prototype', FALSE, TRUE, $p, $file)) . ';';
	$self->prestatement[] = $ret . '->prototype = ' . $tmp . ';';

	$self->prestatement[] = $tmp . ' = ' . WALK(array('call_', $constructor, $arguments, $ret, TRUE, $p, $file, TRUE)) . ';';
	$self->prestatement[] = 'if (is_object(' . $tmp . ') && ' . $tmp . ' !== JS::$undefined) { ' .
		$ret . ' = ' . $tmp . '; }';

	return $ret;
}

this() -> '$leThis'

null() -> var_export(NULL, TRUE)

true() -> var_export(TRUE, TRUE)

false() -> var_export(FALSE, TRUE)

undefined() -> 'JS::$undefined'

number(n) -> var_export($n, TRUE)

string(s) -> var_export($s, TRUE)

regexp(regexp, flags, p, file) {
	return WALK(array('new',
		array('identifier', 'RegExp', $p, $file, TRUE),
		array(array('string', $regexp), array('string', $flags)),
		$p, $file));
}

identifier(identifier, p, file, throw) {
	$assigned = isset($self->assigned[$identifier]);

	$ret = WALK(array('lookup_', '$scope', $identifier, 'up', TRUE, TRUE, $p, $file));

	if ($throw && !$assigned) {
		$self->prestatement[] = "if (\$U" . substr($ret, 2) . ") {";
		WALK(array('ReferenceError_', "$identifier is not defined", $p, $file));
		$self->prestatement[] = "}";
	}

	return $ret;
}

array(elements_list) {
	$ret = WALK(array('genvar_'));

	$self->prestatement[] = $ret . ' = clone JS::$arrayTemplate;';
	$self->prestatement[] = $ret . '->properties[\'length\'] = ' . count($elements_list) . ';';
	$self->prestatement[] = $ret . '->attributes[\'length\'] = JS::WRITABLE;';

	foreach ($elements_list as $i => $element) {
		if ($element === NULL) { continue; }
		$element = WALK($element);
		$self->prestatement[] = $ret . '->properties[' . $i . '] = ' . $element . ';';
		$self->prestatement[] = $ret . '->attributes[' . $i . '] = JS::WRITABLE | JS::ENUMERABLE | JS::CONFIGURABLE;';
	}

	return $ret;
}

object(properties_list) {
	$ret = WALK(array('genvar_'));

	$self->prestatement[] = $ret . ' = clone JS::$objectTemplate;';

	foreach ($properties_list as $property) {
		list($name, $value) = $property;
		$name = var_export($name, TRUE);
		$value = WALK($value);
		$self->prestatement[] = $ret . '->properties[' . $name . '] = ' . $value . ';';
		$self->prestatement[] = $ret . '->attributes[' . $name . '] = JS::WRITABLE | JS::ENUMERABLE | JS::CONFIGURABLE;';
	}

	return $ret;
}

php(parts) -> implode('', WALKEACH($parts))

raw(code) -> trim($code)
